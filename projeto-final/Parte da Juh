//mostrar os dados baseados no autor é no nome do livro completa

case 2:
    printf("\nDigite o nome do autor: ");
    char autorBusca[250];
    scanf(" %[^\n]", autorBusca);

    for (int i = 0; i < totalLivros; i++)
    {
        if (strcmp(livros[i].autor, autorBusca) == 0)
        {
            printf("\nLivro encontrado pelo autor!!\n");

            if (livros[i].emprestado == 1)
            {
                printf("\nMas está indisponível.");
            }
            break; // Finaliza a busca após encontrar o livro
        }
    }
    break;


case 3:
    printf("\nDigite o título do livro: ");
    char tituloBusca[250];
    scanf(" %[^\n]", tituloBusca);

    for (int i = 0; i < totalLivros; i++)
    {
        if (strcmp(livros[i].titulo, tituloBusca) == 0)
        {
            printf("\nLivro encontrado pelo título!!\n");

            if (livros[i].emprestado == 1)
            {
                printf("\nMas está indisponível.");
            }
            break; // Finaliza a busca após encontrar o livro
        }
    }
    break;

//opção de escolher o livro para pegar emprestado

const int MAX_LIVROS = 100;

typedef struct
{
    int codigo;
    int isbn;
    char titulo[250];
    char autor[250];
    int emprestado;
} Livro;

// ... (código anterior)

void listarLivrosDisponiveis(Livro *livros, int totalLivros);
void emprestarLivroEscolhido(Livro *livros, int totalLivros, int indiceLivro);

// ... (código anterior)

void emprestarLivro(Livro *livros, int totalLivros)
{
    printf("Livros disponíveis para empréstimo:\n");
    listarLivrosDisponiveis(livros, totalLivros);

    printf("Digite o número do livro para empréstimo: ");
    int escolha;
    scanf("%d", &escolha);

    if (escolha >= 1 && escolha <= totalLivros)
    {
        emprestarLivroEscolhido(livros, totalLivros, escolha - 1);
    }
    else
    {
        printf("Escolha inválida.\n");
    }
}

void listarLivrosDisponiveis(Livro *livros, int totalLivros)
{
    for (int i = 0; i < totalLivros; i++)
    {
        if (livros[i].emprestado == 0)
        {
            printf("%d. ISBN: %d, Título: %s, Autor: %s\n", i + 1, livros[i].isbn, livros[i].titulo, livros[i].autor);
        }
    }
}

void emprestarLivroEscolhido(Livro *livros, int totalLivros, int indiceLivro)
{
    if (livros[indiceLivro].emprestado == 1)
    {
        printf("Livro indisponível para empréstimo.\n");
    }
    else
    {
        livros[indiceLivro].emprestado = 1;
        printf("Livro emprestado com sucesso!\n");
        salvarDados(livros, totalLivros);
    }
}

//escolher um dos livros baseado em livros já cadastrados: 

const int MAX_LIVROS = 100;

typedef struct {
    int codigo;
    int isbn;
    char titulo[250];
    char autor[250];
    int emprestado;
} Livro;

void listarLivros(Livro *livros, int totalLivros) {
    printf("Livros cadastrados:\n");
    for (int i = 0; i < totalLivros; i++) {
        printf("%d. ISBN: %d, Título: %s, Autor: %s\n", i + 1, livros[i].isbn, livros[i].titulo, livros[i].autor);
    }
}

int escolherLivro(Livro *livros, int totalLivros) {
    listarLivros(livros, totalLivros);

    printf("\nEscolha um dos livros acima: ");
    int escolha;
    scanf("%d", &escolha);

    if (escolha >= 1 && escolha <= totalLivros) {
        return escolha - 1; // Retorna o índice escolhido
    } else {
        printf("Escolha inválida.\n");
        return -1; // Retorna -1 para indicar uma escolha inválida
    }
}

int main() {
    Livro biblioteca[MAX_LIVROS];
    int totalLivros = 0;
    // Suponha que já exista o código para carregar os dados

    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1. Cadastrar Livro\n");
        printf("2. Emprestar Livro\n");
        printf("3. Devolver Livro\n");
        printf("4. Listar Livros Emprestados\n");
        printf("5. Listar todos os Livros\n");
        printf("0. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                // Chame a função para cadastrar um livro
                break;
            case 2: {
                int indiceLivro = escolherLivro(biblioteca, totalLivros);
                if (indiceLivro != -1) {
                    // Realize as operações de empréstimo aqui
                    printf("Você escolheu emprestar o livro: %s\n", biblioteca[indiceLivro].titulo);
                }
                break;
            }
            case 3:
                // Chame a função para devolver um livro
                break;
            case 4:
                // Chame a função para listar os livros emprestados
                break;
            case 5:
                listarLivros(biblioteca, totalLivros); // Listar todos os livros
                break;
            case 0:
                printf("Saindo do programa.\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}

//codigo para verificar a disponibilidade de um livro, se disponivel, dar a opção de alugar, se não, dar a opção de livro emprestado no momento.
